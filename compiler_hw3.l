/* Definition section */
%{
#include "y.tab.h"	/* header file generated by bison */
#include <stdbool.h>
#define BUF_SIZE 256

extern YYSTYPE yylval; //YYSTYPE
char buf[BUF_SIZE];
int scope_flag = 0;
int num = 0;
bool need_print = false; 
bool in_if = false;
bool pp_flag = false;

/* This macro is used to record code line */
#define CONCAT { strncat(buf, yytext, BUF_SIZE - strlen(buf) - 1); }
%}

/* Define regular expression label */
digit		[0-9]
letter		[a-zA-Z]
integer     ([-]?){digit}+
float       ([-]?){digit}+"."{digit}+
id			{letter}+({letter}|{digit})*

%option yylineno

%x COMMENT STRING_STATE

/* Rules section */
%%

 /* Arithmetic */
"+"     { CONCAT; return ADD; }
"-" 	{ CONCAT; return SUB; }
"*" 	{ CONCAT; return MUL; }
"/" 	{ CONCAT; return DIV; }
"%"     { CONCAT; return MOD; }
"++"    { CONCAT; return INC; }
"--"    { CONCAT; return DEC; }

 /* Relational */
">"		{ CONCAT; return MD; }
"<"		{ CONCAT; return LD; }
">="	{ CONCAT; return MTE; }
"<="	{ CONCAT; return LTE; }
"=="	{ CONCAT; return EQ; }
"!="	{ CONCAT; return NE; }

 /* Assignment */
"="		{ CONCAT; return ASGN; }
"+="	{ CONCAT; return ADDASGN; }
"-="	{ CONCAT; return SUBASGN; }
"*="	{ CONCAT; return MULASGN; }
"/="	{ CONCAT; return DIVASGN; }
"%="	{ CONCAT; return MODASGN; }

 /* Logical */
"&&"	{ CONCAT; return AND; }
"||"	{ CONCAT; return OR; }
"!"		{ CONCAT; return NOT; }

 /* Delimiters */
"("		{ scope_flag++; CONCAT; return LB; }
")"		{ scope_flag--; CONCAT; return RB; }
"{"		{ scope_flag++; pp_flag = true; CONCAT; return LCB; }
"}"		{ scope_flag--; pp_flag = false; need_print=true; CONCAT; return RCB; }
"["		{ CONCAT; return LSB; }
"]"		{ CONCAT; return RSB; }
","		{ CONCAT; return COMMA; }

 /* Print Keywords */
"print"		{ CONCAT; return PRINT; }

 /* Condition and Loop Keywords */
"if"		{ in_if=true; CONCAT; return IF; }
"else"		{ CONCAT; return ELSE; }
"for"		{ CONCAT; return FOR; }
"while"		{ CONCAT; return WHILE; }

 /* Declaration Keywords */
"void"		{ CONCAT; return VOID; }
"int"		{ CONCAT; return INT; }
"float"  	{ CONCAT; return FLOAT; }
"string"  	{ CONCAT; return STRING; }
"bool"  	{ CONCAT; return BOOL; }

 /* boolean Keywords */
"true"      { CONCAT; return TRUE; }
"false"     { CONCAT; return FALSE; }

"return"    { CONCAT; return RET; }

 /* String Constant */
\"				        { CONCAT; BEGIN STRING_STATE; }
<STRING_STATE>\"		{ CONCAT; BEGIN INITIAL; }
<STRING_STATE>[^"]*		{ CONCAT; yylval.string = strdup(yytext); return STR_CONST; }

 /* Number Constant */
{integer}	{ CONCAT; yylval.i_val = atoi(yytext); return I_CONST; }
{float}	    { CONCAT; yylval.f_val = atof(yytext); return F_CONST; }

 /* C type Comment */
"/*"				{ CONCAT; BEGIN COMMENT; }
<COMMENT>[^*\n]+	{ CONCAT; }
<COMMENT>\n			{ printf("%d: %s\n", yylineno, buf); strcpy(buf, "");}
<COMMENT>"*"		{ CONCAT; }
<COMMENT>"*/"		{ CONCAT; BEGIN INITIAL; return COMMENTLINE;}

 /* C++ type Comment */
\/\/.*	{ CONCAT; return COMMENTLINE; }

 /* Variable ID */
 {id}       { CONCAT; yylval.string = strdup(yytext); return ID; }

 /* others */

[;]         { CONCAT; return SEMICOLON; }
[\n]        {
                if (strcmp(buf, "") != 0) printf("%d: %s\n", yylineno, buf);
                else printf("%d:\n", yylineno);
                return NEWLINE;
                strcpy(buf, "");
            }
[ \t]*		{ CONCAT; } /* Ignore */
[^ \t\n] 	{ } /* Ignore other charactor sets */
<<EOF>>     { return 0; }

%%

int yywrap()
{
    return 1;
}
